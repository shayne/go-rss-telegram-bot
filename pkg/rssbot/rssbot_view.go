// Copyright (c) Tailscale Inc & AUTHORS
// SPDX-License-Identifier: BSD-3-Clause

// Code generated by tailscale/cmd/viewer; DO NOT EDIT.

package rssbot

import (
	"encoding/json"
	"errors"
)

//go:generate go run tailscale.com/cmd/cloner  -clonefunc=false -type=Subscription,FeedInfo,FeedError

// View returns a read-only view of Subscription.
func (p *Subscription) View() SubscriptionView {
	return SubscriptionView{ж: p}
}

// SubscriptionView provides a read-only view over Subscription.
//
// Its methods should only be called if `Valid()` returns true.
type SubscriptionView struct {
	// ж is the underlying mutable value, named with a hard-to-type
	// character that looks pointy like a pointer.
	// It is named distinctively to make you think of how dangerous it is to escape
	// to callers. You must not let callers be able to mutate it.
	ж *Subscription
}

// Valid reports whether v's underlying value is non-nil.
func (v SubscriptionView) Valid() bool { return v.ж != nil }

// AsStruct returns a clone of the underlying value which aliases no memory with
// the original.
func (v SubscriptionView) AsStruct() *Subscription {
	if v.ж == nil {
		return nil
	}
	return v.ж.Clone()
}

func (v SubscriptionView) MarshalJSON() ([]byte, error) { return json.Marshal(v.ж) }

func (v *SubscriptionView) UnmarshalJSON(b []byte) error {
	if v.ж != nil {
		return errors.New("already initialized")
	}
	if len(b) == 0 {
		return nil
	}
	var x Subscription
	if err := json.Unmarshal(b, &x); err != nil {
		return err
	}
	v.ж = &x
	return nil
}

func (v SubscriptionView) UserID() int64        { return v.ж.UserID }
func (v SubscriptionView) ChatID() int64        { return v.ж.ChatID }
func (v SubscriptionView) FeedURL() string      { return v.ж.FeedURL }
func (v SubscriptionView) FeedInfo() FeedInfo   { return v.ж.FeedInfo }
func (v SubscriptionView) LastChecked() string  { return v.ж.LastChecked }
func (v SubscriptionView) LastItemGUID() string { return v.ж.LastItemGUID }

// A compilation failure here means this code must be regenerated, with the command at the top of this file.
var _SubscriptionViewNeedsRegeneration = Subscription(struct {
	UserID       int64
	ChatID       int64
	FeedURL      string
	FeedInfo     FeedInfo
	LastChecked  string
	LastItemGUID string
}{})

// View returns a read-only view of FeedInfo.
func (p *FeedInfo) View() FeedInfoView {
	return FeedInfoView{ж: p}
}

// FeedInfoView provides a read-only view over FeedInfo.
//
// Its methods should only be called if `Valid()` returns true.
type FeedInfoView struct {
	// ж is the underlying mutable value, named with a hard-to-type
	// character that looks pointy like a pointer.
	// It is named distinctively to make you think of how dangerous it is to escape
	// to callers. You must not let callers be able to mutate it.
	ж *FeedInfo
}

// Valid reports whether v's underlying value is non-nil.
func (v FeedInfoView) Valid() bool { return v.ж != nil }

// AsStruct returns a clone of the underlying value which aliases no memory with
// the original.
func (v FeedInfoView) AsStruct() *FeedInfo {
	if v.ж == nil {
		return nil
	}
	return v.ж.Clone()
}

func (v FeedInfoView) MarshalJSON() ([]byte, error) { return json.Marshal(v.ж) }

func (v *FeedInfoView) UnmarshalJSON(b []byte) error {
	if v.ж != nil {
		return errors.New("already initialized")
	}
	if len(b) == 0 {
		return nil
	}
	var x FeedInfo
	if err := json.Unmarshal(b, &x); err != nil {
		return err
	}
	v.ж = &x
	return nil
}

func (v FeedInfoView) Title() string       { return v.ж.Title }
func (v FeedInfoView) Description() string { return v.ж.Description }
func (v FeedInfoView) Link() string        { return v.ж.Link }

// A compilation failure here means this code must be regenerated, with the command at the top of this file.
var _FeedInfoViewNeedsRegeneration = FeedInfo(struct {
	Title       string
	Description string
	Link        string
}{})

// View returns a read-only view of FeedError.
func (p *FeedError) View() FeedErrorView {
	return FeedErrorView{ж: p}
}

// FeedErrorView provides a read-only view over FeedError.
//
// Its methods should only be called if `Valid()` returns true.
type FeedErrorView struct {
	// ж is the underlying mutable value, named with a hard-to-type
	// character that looks pointy like a pointer.
	// It is named distinctively to make you think of how dangerous it is to escape
	// to callers. You must not let callers be able to mutate it.
	ж *FeedError
}

// Valid reports whether v's underlying value is non-nil.
func (v FeedErrorView) Valid() bool { return v.ж != nil }

// AsStruct returns a clone of the underlying value which aliases no memory with
// the original.
func (v FeedErrorView) AsStruct() *FeedError {
	if v.ж == nil {
		return nil
	}
	return v.ж.Clone()
}

func (v FeedErrorView) MarshalJSON() ([]byte, error) { return json.Marshal(v.ж) }

func (v *FeedErrorView) UnmarshalJSON(b []byte) error {
	if v.ж != nil {
		return errors.New("already initialized")
	}
	if len(b) == 0 {
		return nil
	}
	var x FeedError
	if err := json.Unmarshal(b, &x); err != nil {
		return err
	}
	v.ж = &x
	return nil
}

func (v FeedErrorView) FeedURL() string      { return v.ж.FeedURL }
func (v FeedErrorView) ErrorCount() int      { return v.ж.ErrorCount }
func (v FeedErrorView) LastError() string    { return v.ж.LastError }
func (v FeedErrorView) LastErrorAt() string  { return v.ж.LastErrorAt }
func (v FeedErrorView) FirstErrorAt() string { return v.ж.FirstErrorAt }

// A compilation failure here means this code must be regenerated, with the command at the top of this file.
var _FeedErrorViewNeedsRegeneration = FeedError(struct {
	FeedURL      string
	ErrorCount   int
	LastError    string
	LastErrorAt  string
	FirstErrorAt string
}{})
